// =======================================================
// This file is auto generated by [Excel2Plist] convertor,
// do not edit by youself!
// >>>> by HuMinghua <<<<  2016年1月21日 下午5:12:47
// ======================================================

package com.study.shenxing.caesar.database;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;
import android.util.Log;

import com.study.shenxing.caesar.R;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class ForGOPowerHelper extends SQLiteOpenHelper {

    private static String TAG = "DBHelper";

    public static String DB_NAME = "residue.db";
    private static String PACKNAME = "com.study.shenxing.caesar";

    private Context context;
    private SQLiteDatabase database;
    private static final String DB_PATH = Environment.getDataDirectory().getAbsolutePath() + "/data/" + PACKNAME + "/databases/";

    public ForGOPowerHelper(Context context) {
        super(context, DB_NAME, null, 1);
        this.context = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        Log.d(TAG, "OnDatabaseCreate..");
        try {
            createDataBase();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        Log.d(TAG, "Upgrade..Database...oldVersion:" + oldVersion + "  newVersion:" + newVersion);
    }

    @Override
    public synchronized void close() {
        if (database != null)
            database.close();

        super.close();
    }

    public String DB_PATH() {
        return Environment.getDataDirectory().getAbsolutePath() + "/data/" + PACKNAME + "/databases/";
    }

    public void createDataBase() throws IOException {

            copyDataBaseFromRaw();
    }

    private boolean checkDataBaseExists() {

        SQLiteDatabase checkDB = null;
        try {
            checkDB = SQLiteDatabase.openDatabase(DB_PATH() + DB_NAME, null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
        } catch (SQLiteException e) {
            e.printStackTrace();
        }

        if (checkDB != null) {
            checkDB.close();
        }

        return checkDB != null ? true : false;
    }


    private void copyDataBaseFromRaw() throws IOException {
        // 检查 SQLite 数据库文件是否存在
        if (/*(new File(DB_PATH + DB_NAME)).exists() == false*/true) {
            File f = new File(DB_PATH);
            // 如 database 目录不存在，新建该目录
            if (!f.exists()) {
                f.mkdir();
            }

            InputStream is = null;
            OutputStream os = null;

            try {
                // 得到 raw 目录下我们实现准备好的 SQLite 数据库作为输入流
                is = context.getResources().openRawResource(R.raw.residue);
                // 输出流
                os = new FileOutputStream(DB_PATH + DB_NAME);
                // 文件写入
                byte[] buffer = new byte[1024];
                int length;
                while ((length = is.read(buffer)) > 0) {
                    os.write(buffer, 0, length);
                }
                Log.i("shenxing", "解密后： error :" + (DB_PATH + DB_NAME)) ;

                // 关闭文件流
                os.flush();
                os.close();
                is.close();
            } catch (Resources.NotFoundException e) {
                e.printStackTrace();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (IndexOutOfBoundsException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (os != null) {
                    try {
                        os.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        if (is != null) {
                            try {
                                is.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }

            }

        } else {
            //残留文件数据库已经存在

        }
    }

    private void deleteDataBaseIfExist() {
        File file = new File(DB_PATH(), DB_NAME);
        if (file.exists()) {
            file.delete();
        }
    }

    public SQLiteDatabase openDataBaseWithReadOnly() throws SQLException {
        return SQLiteDatabase.openDatabase(DB_PATH() + DB_NAME, null, SQLiteDatabase.OPEN_READONLY | SQLiteDatabase.NO_LOCALIZED_COLLATORS);
    }

    public SQLiteDatabase openDataBaseWithWritable() throws SQLException {
        return SQLiteDatabase.openDatabase(DB_PATH() + DB_NAME, null, SQLiteDatabase.OPEN_READWRITE);
    }


}

